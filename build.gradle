plugins {
	id 'java'
	id 'org.springframework.boot' version '2.2.1.RELEASE' apply false
 	id "io.spring.dependency-management" version "1.0.8.RELEASE"
	id "org.flywaydb.flyway" version "5.2.4"
}

ext {
	springBootVersion = '2.2.1.RELEASE'
	springDependMng = '1.0.8.RELEASE' 
	flyway = [
		url: 'jdbc:postgresql://localhost:5430/wishDream',
		user: 'wishdream',
		password: 'wishdream',
		driver: 'org.postgresql.Driver',
		schemas: ['public']
	]
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	
	group 'kr.co.wishDream'
	version '0.0.1-SNAPSHOT'
	
	repositories {
		mavenCentral()
		maven {	url 'https://repo.spring.io/milestone' }
	}
	
	dependencies {
		compile group: 'org.postgresql', name: 'postgresql', version: '42.2.6'
	}
	
	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
	
	//exclude common-logging
	[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')
}

subprojects {
	apply plugin: 'org.springframework.boot'
	apply plugin: "io.spring.dependency-management"
	
	sourceCompatibility = 12
	targetCompatibility = 12
	
	dependencyManagement {
		imports {
			mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		}
	}
	
	configurations {
		developmentOnly
		runtimeClasspath {
			extendsFrom developmentOnly
		}
		compileOnly {
			extendsFrom annotationProcessor
		}
	}
	
	sourceSets {
	    main {
	        java {
	            srcDirs = ['src/main/java']
	            java.outputDir = file('out/main')
	            output.resourcesDir = file('out/main')
	        }
	        resources {
	            srcDirs = ['src/main/resources']
	        }
	    }
	    test {
	    	java {
	    		srcDirs = ['src/test/java']
	    	}
	    	resources {
	    		srcDirs = ['src/test/resources']
	    	}
	    }
	}
	
	
	dependencies {
		implementation "org.springframework.boot:spring-boot-starter-webflux"
		compile "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
		developmentOnly 'org.springframework.boot:spring-boot-devtools'

		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		testCompileOnly 'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'io.projectreactor:reactor-test'
		
		// database
		compile group: 'com.github.davidmoten', name: 'rxjava2-jdbc', version: '0.2.5'
		compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	}
	
	task start() {
		dependsOn 'clean'
		println "####################################################"
		println	""
		println "  "+project.name+" project completed the clean task"
		println	""
		println "####################################################"
		dependsOn 'build'
		println "####################################################"
		println	""
		println "  "+project.name+" project completed the build task"
		println	""
		println "####################################################"
	}
    
}
 
flyway {
    url = project.flyway.url
    user = project.flyway.user
    password = project.flyway.password
    driver = project.flyway.driver
    schemas = project.flyway.schemas
    locations = [ 'classpath:/db/migration' ] //생성시킬 때
}

project(':wishDream_Web') {
	bootJar {
		//launchScript()
		mainClassName = 'kr.co.wishDream.WishDreamWebApplication'
		classifier = 'boot'
		from('out/main') {
			into 'static'
		}
	}
	dependencies {
		compile project(':wishDream_Core')
	}
	test {
	    ignoreFailures = true
	}
	
}

project(':wishDream_Core') {
	bootJar {
		enabled = false
	}
	jar {
		enabled = true
	    manifest {
	    	attributes
	    } 
	    baseName = 'wishDream_Core'
	    version = '0.0.1'
	    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	}
	
	test {
	    ignoreFailures = true
	}
}

task start() {
    println "java-version : ${sourceCompatibility}"
    println "project-version : ${version}"

    dependsOn ':wishDream_Core:start'
    dependsOn ':wishDream_Web:start'
	
    dependsOn(':flywayMigrate')
    println "####################################################"
    println	""
    println "            flywayMigrate completed                 "
    println	""
    println "####################################################"
    
}

defaultTasks 'start'
