plugins {
	id 'java'
	id 'org.springframework.boot' version '2.2.1.RELEASE' apply false
 	id "io.spring.dependency-management" version "1.0.8.RELEASE"
	id "org.flywaydb.flyway" version "6.0.8"
}

ext {
	flyway = [
		url: 'jdbc:postgresql://localhost:5430/wishDream',
		user: 'wishdream',
		password: 'wishdream',
		driver: 'org.postgresql.Driver',
		schemas: ['public']
	]
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'maven-publish'
	
	group 'kr.co.wishDream'
	version '0.0.1-SNAPSHOT'
	
	repositories {
		mavenLocal()
		mavenCentral()
		maven {	url 'https://repo.spring.io/milestone' }
	}
	
	configurations {
		developmentOnly
		runtimeClasspath {
			extendsFrom developmentOnly
		}
		compileOnly {
			extendsFrom annotationProcessor
		}
		testImplementation.extendsFrom compileOnly
	}
	
	dependencies {
		implementation 'org.postgresql:postgresql:42.2.6'
	}
	
	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
}

subprojects {
	apply plugin: 'org.springframework.boot'
	apply plugin: "io.spring.dependency-management"
	
	sourceCompatibility = 11
	targetCompatibility = 11
	
	dependencyManagement {
		imports {
			mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		}
	}
	
	dependencies {
		implementation "org.springframework.boot:spring-boot-starter-webflux"
		implementation 'org.springframework.boot:spring-boot-starter-integration'
		implementation "org.springframework.boot:spring-boot-starter-security"
		developmentOnly 'org.springframework.boot:spring-boot-devtools'
		
		implementation 'org.springframework.security:spring-security-oauth2-client:5.2.0.RELEASE'

		implementation "io.projectreactor:reactor-core:3.3.0.RELEASE"
      	testImplementation("io.projectreactor:reactor-test:3.3.0.RELEASE")

		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		testCompileOnly 'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'

		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'io.projectreactor:reactor-test'
		
		// database
		implementation 'com.github.davidmoten:rxjava2-jdbc:0.2.5'
		implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
		implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	}
	
	sourceSets {
        main {
	    	java.srcDirs "${project.projectDir}/src/main/java"
	    	java.outputDir = file('out/java')
	        output.resourcesDir = file('out/resources')
        }
    }
	
	task start() {
		def projectName = project.name
	
		dependsOn 'clean'
		println "####################################################"
		println	""
		println "  "+projectName+" project completed the clean task"
		println	""
		dependsOn 'build'
		println "####################################################"
		println	""
		println "  "+projectName+" project completed the build task"
		println	""
		println "####################################################"
		if (projectName == "wishDream_Core") {
			dependsOn 'coreJar'
			println	""
			println "  "+projectName+" project coreJar task"
			println	""
		}
	}
    
}
 
flyway {
    url = project.flyway.url
    user = project.flyway.user
    password = project.flyway.password
    driver = project.flyway.driver
    schemas = project.flyway.schemas
    locations = [ 'classpath:/db/migration/postgresql' ] //생성시킬 때
    encoding = 'UTF-8'
    outOfOrder = false
    validateOnMigrate = true
    cleanDisabled = false
}

flywayMigrate {
	// dependsOn flywayClean
	dependsOn build
}

project(':wishDream_Web') {
	def coreJarPath = rootProject.files('wishDream_Core/build/libs')[0].toString()
	bootJar {
		//launchScript()
		mainClassName = 'kr.co.wishDream.WishDreamWebApplication'
		classifier = 'boot'
		from('out/main') {
			into 'static'
		}
	}
	dependencies {
		//implementation project(':wishDream_Core')
	 	implementation fileTree(dir: coreJarPath, include: ['*.jar'])
	}
	test {
	    ignoreFailures = true
	}
	
}

project(':wishDream_Core') {
	bootJar {
		enabled = false
	}
	
	task coreJar(type: Jar, dependsOn: configurations.runtimeClasspath) {
	    archiveClassifier = 'core'
	    archiveBaseName = 'wishDream_Core'
		
		from sourceSets.main.java.outputDir
		from javadoc.destinationDir
		from configurations.compileClasspath.findAll { it.isDirectory() }.collect { zipTree(it) }
		
		exclude "src/main/resources" //if want to exclude resources
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
	    //from configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) } <- 에러터짐 ㅎ
    }
	
	test {
	    ignoreFailures = true
	}
}


task start() {
    println "PROJECT INFO"
    println "java version : ${sourceCompatibility}"
    println "project version : ${version}"
	println "root project path : ${project.rootDir}"
	
    dependsOn ':wishDream_Core:start'
    dependsOn ':wishDream_Web:start'
	
    dependsOn ':flywayValidate'
    dependsOn ':flywayMigrate'
    println "####################################################"
    println	""
    println "            flywayMigrate completed                 "
    println	""
    println "####################################################"
    
}
