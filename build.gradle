buildscript {
	ext {
		springVersion = "2.3.1.RELEASE"
		springDependencyMng = "1.0.8.RELEASE"
		ioReactorVersion = "3.3.0.RELEASE"
		jwtVersion = "1.1.1.RELEASE"
		kafkaVersion = "1.2.2.RELEASE"
		junitVersion = "5.6.2"
		flywayVersion = "6.4.4"
		flyway = [
			url: "jdbc:postgresql://localhost:5430/wishDream",
			user: "wishdream",
			password: "wishdream",
			driver: "org.postgresql.Driver",
			schemas: ["public"]
		]
		postgresDriver = "42.2.14"
		rxJava2Driver = "0.2.7"
		mongoDriver = "4.0.5"
		embedMongo = "2.2.0"
		commonCollection4 = "4.4"
	}
}

plugins {
	id "java"
	id "org.springframework.boot" version "${springVersion}"
 	id "io.spring.dependency-management" version "${springDependencyMng}"
	id "org.flywaydb.flyway" version "${flywayVersion}"
}

allprojects {
	apply plugin: "java"
	apply plugin: "idea"
	apply plugin: "eclipse"
	apply plugin: "maven-publish"
	
	group "kr.co.wishDream"
	version "0.0.1-SNAPSHOT"
	
	repositories {
		mavenLocal()
		mavenCentral()
		maven {	url "https://repo.spring.io/milestone" }
	}
	
	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
		testImplementation.extendsFrom compileOnly
	}
	
	dependencies {
		// database
		implementation "org.postgresql:postgresql:${postgresDriver}"
	}
	
	[compileJava, compileTestJava]*.options*.encoding = "UTF-8"
}

subprojects {
	apply plugin: "org.springframework.boot"
    apply plugin: 'io.spring.dependency-management'
	
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	
	dependencyManagement {
		imports {
			mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		}
	}
	
	dependencies {
		implementation "org.springframework.boot:spring-boot-starter-webflux"
		implementation "org.springframework.boot:spring-boot-starter-integration"
		implementation "org.springframework.boot:spring-boot-starter-security"
		implementation "org.springframework.security:spring-security-jwt:${jwtVersion}"
	    implementation 'org.springframework.boot:spring-boot-starter-actuator'
	    implementation "io.jsonwebtoken:jjwt:0.9.1"
	    implementation group: 'org.apache.commons', name: 'commons-collections4', version: "${commonCollection4}"
	

		developmentOnly "org.springframework.boot:spring-boot-devtools"
		
		implementation "org.springframework.security:spring-security-oauth2-client"

		implementation "com.github.davidmoten:rxjava2-jdbc:${rxJava2Driver}"
		implementation "org.springframework.boot:spring-boot-starter-data-mongodb-reactive"
		implementation group: 'org.mongodb', name: 'mongodb-driver-reactivestreams', version: "${mongoDriver}"

		implementation "io.projectreactor.kafka:reactor-kafka:${kafkaVersion}"

		implementation "io.projectreactor:reactor-core:${ioReactorVersion}"
      	testImplementation("io.projectreactor:reactor-test:${ioReactorVersion}")
		testImplementation group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo', version: "${embedMongo}"

		compileOnly "org.projectlombok:lombok"
		annotationProcessor "org.projectlombok:lombok"
		testCompileOnly "org.projectlombok:lombok"
		testAnnotationProcessor "org.projectlombok:lombok"

		testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
		testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
 		testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
		testImplementation ("org.springframework.boot:spring-boot-starter-test") {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
		testImplementation "io.projectreactor:reactor-test"
		implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
		implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity5"
	}
	
	sourceSets {
        main {
	    	java.srcDirs "${project.projectDir}/src/main/java"
	    	java.outputDir = file("out/java")
	        output.resourcesDir = file("out/resources")
        }
    }
	
	task start() {
		def projectName = project.name
	
		dependsOn "clean"
		println "####################################################"
		println	""
		println "  "+projectName+" project completed the clean task"
		println	""
		dependsOn "build"
		println "####################################################"
		println	""
		println "  "+projectName+" project completed the build task"
		println	""
		println "####################################################"
		if (projectName == "wishDream_Core") {
			dependsOn "coreJar"
			println	""
			println "  "+projectName+" project coreJar task"
			println	""
		}
	}
    test {
		useJUnitPlatform()
	}
}
 
flyway {
    url = project.flyway.url
    user = project.flyway.user
    password = project.flyway.password
    driver = project.flyway.driver
    schemas = project.flyway.schemas
    locations = [ "classpath:/db/migration/postgresql" ]
    encoding = "UTF-8"
    outOfOrder = false
    validateOnMigrate = true
    cleanDisabled = false
}

flywayMigrate {
	// dependsOn flywayClean
	dependsOn build
}

bootJar.enabled = false

project(":wishDream_Core") {
	jar {
		enabled = true
	}
	bootJar.enabled = false
	task coreJar(type: Jar, dependsOn: configurations.runtimeClasspath) {
	    archiveClassifier = "core"
	    archiveBaseName = "wishDream_Core"
		
		from sourceSets.main.java.outputDir
		from javadoc.destinationDir
		from configurations.compileClasspath.findAll { it.isDirectory() }.collect { zipTree(it) }
		
		exclude "src/main/resources" //if want to exclude resources
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
	    //from configurations.runtimeClasspath.findAll { it.name.endsWith("jar") }.collect { zipTree(it) }
    }
	
	test {
	    ignoreFailures = true
	}
}

project(":wishDream_Web") {
	
	def coreJarPath = rootProject.files("wishDream_Core/build/libs")[0].toString()
	jar {
		enabled = true
		 manifest {
	        attributes 'Main-Class': 'kr.co.wishDream.WishDreamWebApplication'
	    }
      	from {
        	configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    	}
	}
	bootJar {
		//launchScript()
		mainClassName = "kr.co.wishDream.WishDreamWebApplication"
		classifier = "boot"
		from("out/main") {
			into "static"
		}
		with jar
	}
	springBoot {
		buildInfo()
	}
	dependencies {
		//implementation project(":wishDream_Core")
		implementation fileTree(dir: coreJarPath, include: ["*.jar"])
	 	implementation (project(':wishDream_Core'))  {
		    transitive = true
		}
	}
	test {
	    ignoreFailures = true
	}
	
}


task start() {
    println "PROJECT INFO"
    println "java version : ${sourceCompatibility}"
    println "project version : ${version}"
	println "root project path : ${project.rootDir}"
	
    dependsOn ":wishDream_Core:start"
    dependsOn ":wishDream_Web:start"
	
    dependsOn ":flywayValidate"
    dependsOn ":flywayMigrate"
    println "####################################################"
    println	""
    println "            flywayMigrate completed                 "
    println	""
    println "####################################################"
    
}
